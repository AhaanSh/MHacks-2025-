"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/NotificationSystem.tsx":
/*!***********************************************!*\
  !*** ./src/components/NotificationSystem.tsx ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NotificationSystem: () => (/* binding */ NotificationSystem),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst NotificationSystem = ()=>{\n    const getNotificationTitle = (type)=>{\n        switch(type){\n            case 'success':\n                return '🎉 Great News!';\n            case 'warning':\n                return '⚠️ Action Needed';\n            case 'info':\n                return 'ℹ️ Update';\n            default:\n                return 'RentAI';\n        }\n    };\n    const getNotificationStyle = (type)=>{\n        switch(type){\n            case 'success':\n                return 'bg-success text-success-foreground border-success/20';\n            case 'warning':\n                return 'bg-warning text-warning-foreground border-warning/20';\n            case 'info':\n                return 'bg-accent text-accent-foreground border-accent/20';\n            default:\n                return '';\n        }\n    };\n    return null; // This component only manages notifications, no visual output\n};\n_c = NotificationSystem;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NotificationSystem);\nvar _c;\n$RefreshReg$(_c, \"NotificationSystem\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL05vdGlmaWNhdGlvblN5c3RlbS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFTyxNQUFNQSxxQkFBcUI7SUFFaEMsTUFBTUMsdUJBQXVCLENBQUNDO1FBQzVCLE9BQVFBO1lBQ04sS0FBSztnQkFBVyxPQUFPO1lBQ3ZCLEtBQUs7Z0JBQVcsT0FBTztZQUN2QixLQUFLO2dCQUFRLE9BQU87WUFDcEI7Z0JBQVMsT0FBTztRQUNsQjtJQUNGO0lBRUEsTUFBTUMsdUJBQXVCLENBQUNEO1FBQzVCLE9BQVFBO1lBQ04sS0FBSztnQkFBVyxPQUFPO1lBQ3ZCLEtBQUs7Z0JBQVcsT0FBTztZQUN2QixLQUFLO2dCQUFRLE9BQU87WUFDcEI7Z0JBQVMsT0FBTztRQUNsQjtJQUNGO0lBRUEsT0FBTyxNQUFNLDhEQUE4RDtBQUM3RSxFQUFFO0tBckJXRjtBQXVCYixpRUFBZUEsa0JBQWtCQSxFQUFDIiwic291cmNlcyI6WyIvVXNlcnMvZm9yZXN0L2VlY3MyODEvcDItc3RvY2tzL01IYWNrcy0yMDI1LS9mcm9udGVuZC9zcmMvY29tcG9uZW50cy9Ob3RpZmljYXRpb25TeXN0ZW0udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvYXN0IH0gZnJvbSBcIkAvaG9va3MvdXNlLXRvYXN0XCI7XG5cbmV4cG9ydCBjb25zdCBOb3RpZmljYXRpb25TeXN0ZW0gPSAoKSA9PiB7XG5cbiAgY29uc3QgZ2V0Tm90aWZpY2F0aW9uVGl0bGUgPSAodHlwZTogc3RyaW5nKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdzdWNjZXNzJzogcmV0dXJuICfwn46JIEdyZWF0IE5ld3MhJztcbiAgICAgIGNhc2UgJ3dhcm5pbmcnOiByZXR1cm4gJ+KaoO+4jyBBY3Rpb24gTmVlZGVkJztcbiAgICAgIGNhc2UgJ2luZm8nOiByZXR1cm4gJ+KEue+4jyBVcGRhdGUnO1xuICAgICAgZGVmYXVsdDogcmV0dXJuICdSZW50QUknO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXROb3RpZmljYXRpb25TdHlsZSA9ICh0eXBlOiBzdHJpbmcpID0+IHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3N1Y2Nlc3MnOiByZXR1cm4gJ2JnLXN1Y2Nlc3MgdGV4dC1zdWNjZXNzLWZvcmVncm91bmQgYm9yZGVyLXN1Y2Nlc3MvMjAnO1xuICAgICAgY2FzZSAnd2FybmluZyc6IHJldHVybiAnYmctd2FybmluZyB0ZXh0LXdhcm5pbmctZm9yZWdyb3VuZCBib3JkZXItd2FybmluZy8yMCc7XG4gICAgICBjYXNlICdpbmZvJzogcmV0dXJuICdiZy1hY2NlbnQgdGV4dC1hY2NlbnQtZm9yZWdyb3VuZCBib3JkZXItYWNjZW50LzIwJztcbiAgICAgIGRlZmF1bHQ6IHJldHVybiAnJztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIG51bGw7IC8vIFRoaXMgY29tcG9uZW50IG9ubHkgbWFuYWdlcyBub3RpZmljYXRpb25zLCBubyB2aXN1YWwgb3V0cHV0XG59O1xuXG5leHBvcnQgZGVmYXVsdCBOb3RpZmljYXRpb25TeXN0ZW07Il0sIm5hbWVzIjpbIk5vdGlmaWNhdGlvblN5c3RlbSIsImdldE5vdGlmaWNhdGlvblRpdGxlIiwidHlwZSIsImdldE5vdGlmaWNhdGlvblN0eWxlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/NotificationSystem.tsx\n"));

/***/ })

});